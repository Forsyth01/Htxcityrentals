
import React, { useState } from "react";
import { X, User, Mail, Building2, Phone, Calendar, Clock, MapPin, Settings, Package, ArrowLeft, Check, ShoppingCart } from "lucide-react";
import toast from "react-hot-toast";
import emailjs from "emailjs-com";
import { useCart } from "../context/CartContext";

export default function ModernQuoteForm({ isOpen, onClose }) {
  const { cartItems, clearCart } = useCart();
  
  const [currentStep, setCurrentStep] = useState("form");
  const [submitting, setSubmitting] = useState(false);
  const [formData, setFormData] = useState({
    fullName: "",
    email: "",
    companyName: "",
    phoneNumber: "",
    eventDate: "",
    eventStartTime: "",
    pickupDate: "",
    nextDayPickup: "",
    eventType: "",
    needSetup: "",
    buildingType: "",
    deliveryAddress: "",
    suite: ""
  });

  if (!isOpen) return null;

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevData => ({
      ...prevData,
      [name]: value
    }));
  };

  const handleFormSubmit = () => {
    // Check if cart is empty
    if (!cartItems || cartItems.length === 0) {
      toast.error("Your cart is empty. Please add items before requesting a quote.");
      return;
    }

    // Validate required fields
    const requiredFields = {
      fullName: "Full Name",
      email: "Email Address",
      phoneNumber: "Phone Number",
      eventDate: "Event Date",
      eventStartTime: "Event Start Time",
      deliveryAddress: "Delivery Address"
    };
    
    const missingFields = Object.keys(requiredFields).filter(field => !formData[field]);
    
    if (missingFields.length > 0) {
      const missingFieldNames = missingFields.map(field => requiredFields[field]);
      toast.error(`Please fill in: ${missingFieldNames.join(", ")}`);
      return;
    }

    setCurrentStep("preview");
  };

  const handleFinalSubmit = () => {
    setSubmitting(true);

    // Format cart items into a string
    const itemsText = cartItems
      .map(
        (item) =>
          `${item.name} x ${item.quantity} = ₦${(item.price * item.quantity).toFixed(2)}`
      )
      .join("\n");

    const total = cartItems
      .reduce((sum, item) => sum + item.price * item.quantity, 0)
      .toFixed(2);

    const templateParams = {
      to_email: "forsythokoegaule01@gmail.com",
      customer_name: formData.fullName,
      customer_email: formData.email,
      company: formData.companyName || "N/A",
      phone: formData.phoneNumber,
      event_date: formData.eventDate,
      event_time: formData.eventStartTime,
      pickup_date: formData.pickupDate || "N/A",
      next_day_pickup: formData.nextDayPickup || "N/A",
      event_type: formData.eventType || "N/A",
      need_setup: formData.needSetup || "N/A",
      building_type: formData.buildingType || "N/A",
      delivery_address: formData.deliveryAddress,
      suite: formData.suite || "N/A",
      items: itemsText,
      total: `₦${total}`,
    };

    // Send email via EmailJS
    emailjs
      .send(
        "YOUR_SERVICE_ID",
        "YOUR_TEMPLATE_ID",
        templateParams,
        "YOUR_PUBLIC_KEY"
      )
      .then(() => {
        toast.success("Quote request sent successfully!");
        clearCart();
        setFormData({
          fullName: "",
          email: "",
          companyName: "",
          phoneNumber: "",
          eventDate: "",
          eventStartTime: "",
          pickupDate: "",
          nextDayPickup: "",
          eventType: "",
          needSetup: "",
          buildingType: "",
          deliveryAddress: "",
          suite: ""
        });
        setCurrentStep("form");
        onClose();
        setSubmitting(false);
      })
      .catch((err) => {
        console.error(err);
        toast.error("Failed to send quote request");
        setSubmitting(false);
      });
  };

  const handleBackToForm = () => {
    setCurrentStep("form");
  };

  const calculateTotal = () => {
    if (!cartItems || cartItems.length === 0) return 0;
    return cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('en-NG', {
      style: 'currency',
      currency: 'NGN',
      minimumFractionDigits: 0
    }).format(amount);
  };

  const InputGroup = ({ icon: Icon, label, required, children, className = "" }) => (
    <div className={`space-y-2 ${className}`}>
      <label className="flex items-center gap-2 text-sm font-semibold text-gray-700">
        <Icon className="w-4 h-4 text-blue-600" />
        {label}
        {required && <span className="text-red-500">*</span>}
      </label>
      {children}
    </div>
  );

  const PreviewItem = ({ label, value, icon: Icon }) => (
    <div className="flex items-start gap-3 py-3 border-b border-gray-100 last:border-b-0">
      <Icon className="w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0" />
      <div className="flex-1">
        <div className="text-sm font-medium text-gray-600">{label}</div>
        <div className="text-gray-900 font-semibold">{value || "Not specified"}</div>
      </div>
    </div>
  );

  const EmptyCartMessage = () => (
    <div className="text-center py-8">
      <ShoppingCart className="w-16 h-16 text-gray-300 mx-auto mb-4" />
      <h3 className="text-lg font-semibold text-gray-600 mb-2">Your cart is empty</h3>
      <p className="text-gray-500">Add some items to your cart before requesting a quote.</p>
    </div>
  );

  // Form Step
  if (currentStep === "form") {
    return (
      <div className="fixed inset-0 z-50 bg-black/60 backdrop-blur-sm flex justify-center items-center p-4">
        <div className="bg-white rounded-3xl shadow-2xl w-full max-w-2xl max-h-[90vh] overflow-hidden relative">
          {/* Header */}
          <div className="bg-gradient-to-r from-blue-600 to-purple-600 px-8 py-6 relative overflow-hidden">
            <div className="absolute inset-0 bg-white/10 backdrop-blur-sm"></div>
            <div className="relative z-10">
              <button
                onClick={onClose}
                className="absolute top-0 right-0 p-2 text-white/80 hover:text-white hover:bg-white/20 rounded-full transition-all duration-200"
              >
                <X className="w-5 h-5" />
              </button>
              <h2 className="text-3xl font-bold text-white mb-2">Get Your Quote</h2>
              <p className="text-blue-100">Fill in your details to receive a personalized quote</p>
            </div>
          </div>

          {/* Form Content */}
          <div className="px-8 py-6 max-h-[calc(90vh-120px)] overflow-y-auto">
            <div className="space-y-6">
              {/* Cart Items Summary */}
              <div className="bg-blue-50 rounded-2xl p-4 border border-blue-200">
                <h3 className="text-sm font-semibold text-blue-800 mb-2 flex items-center gap-2">
                  <ShoppingCart className="w-4 h-4" />
                  Cart Summary ({cartItems?.length || 0} items)
                </h3>
                {cartItems && cartItems.length > 0 ? (
                  <div className="text-sm text-blue-700">
                    <p>Total: <span className="font-bold">{formatCurrency(calculateTotal())}</span></p>
                  </div>
                ) : (
                  <p className="text-sm text-red-600">Your cart is empty</p>
                )}
              </div>

              {/* Personal Information */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-gray-800 flex items-center gap-2">
                  <User className="w-5 h-5 text-blue-600" />
                  Personal Information
                </h3>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <InputGroup icon={User} label="Full Name" required>
                    <input
                      type="text"
                      name="fullName"
                      value={formData.fullName}
                      onChange={handleInputChange}
                      placeholder="Enter your full name"
                      className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 bg-white/80 backdrop-blur-sm"
                    />
                  </InputGroup>
                  
                  <InputGroup icon={Mail} label="Email Address" required>
                    <input
                      type="email"
                      name="email"
                      value={formData.email}
                      onChange={handleInputChange}
                      placeholder="your@email.com"
                      className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 bg-white/80 backdrop-blur-sm"
                    />
                  </InputGroup>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <InputGroup icon={Building2} label="Company Name">
                    <input
                      type="text"
                      name="companyName"
                      value={formData.companyName}
                      onChange={handleInputChange}
                      placeholder="Company name (optional)"
                      className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 bg-white/80 backdrop-blur-sm"
                    />
                  </InputGroup>
                  
                  <InputGroup icon={Phone} label="Phone Number" required>
                    <input
                      type="tel"
                      name="phoneNumber"
                      value={formData.phoneNumber}
                      onChange={handleInputChange}
                      placeholder="+234 xxx xxx xxxx"
                      className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 bg-white/80 backdrop-blur-sm"
                    />
                  </InputGroup>
                </div>
              </div>

              {/* Event Details */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-gray-800 flex items-center gap-2">
                  <Calendar className="w-5 h-5 text-blue-600" />
                  Event Details
                </h3>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <InputGroup icon={Calendar} label="Event Date" required>
                    <input
                      type="date"
                      name="eventDate"
                      value={formData.eventDate}
                      onChange={handleInputChange}
                      className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 bg-white/80 backdrop-blur-sm"
                    />
                  </InputGroup>
                  
                  <InputGroup icon={Clock} label="Event Start Time" required>
                    <input
                      type="time"
                      name="eventStartTime"
                      value={formData.eventStartTime}
                      onChange={handleInputChange}
                      className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 bg-white/80 backdrop-blur-sm"
                    />
                  </InputGroup>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <InputGroup icon={Calendar} label="Pickup Date">
                    <input
                      type="date"
                      name="pickupDate"
                      value={formData.pickupDate}
                      onChange={handleInputChange}
                      className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 bg-white/80 backdrop-blur-sm"
                    />
                  </InputGroup>
                  
                  <InputGroup icon={Package} label="Next Day Pickup">
                    <select
                      name="nextDayPickup"
                      value={formData.nextDayPickup}
                      onChange={handleInputChange}
                      className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 bg-white/80 backdrop-blur-sm appearance-none cursor-pointer"
                    >
                      <option value="">Select option</option>
                      <option value="yes">Yes</option>
                      <option value="no">No</option>
                    </select>
                  </InputGroup>
                </div>
                
                <InputGroup icon={Settings} label="Event Type">
                  <input
                    type="text"
                    name="eventType"
                    value={formData.eventType}
                    onChange={handleInputChange}
                    placeholder="e.g., Wedding, Corporate Event, Birthday"
                    className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 bg-white/80 backdrop-blur-sm"
                  />
                </InputGroup>
              </div>

              {/* Setup & Delivery */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-gray-800 flex items-center gap-2">
                  <MapPin className="w-5 h-5 text-blue-600" />
                  Setup & Delivery
                </h3>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <InputGroup icon={Settings} label="Need Setup?">
                    <select
                      name="needSetup"
                      value={formData.needSetup}
                      onChange={handleInputChange}
                      className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 bg-white/80 backdrop-blur-sm appearance-none cursor-pointer"
                    >
                      <option value="">Select option</option>
                      <option value="yes">Yes, I need setup</option>
                      <option value="no">No, I'll handle setup</option>
                    </select>
                  </InputGroup>
                  
                  <InputGroup icon={Building2} label="Building Type">
                    <input
                      type="text"
                      name="buildingType"
                      value={formData.buildingType}
                      onChange={handleInputChange}
                      placeholder="e.g., Hotel, Hall, Residential"
                      className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 bg-white/80 backdrop-blur-sm"
                    />
                  </InputGroup>
                </div>
                
                <InputGroup icon={MapPin} label="Delivery Address" required>
                  <input
                    type="text"
                    name="deliveryAddress"
                    value={formData.deliveryAddress}
                    onChange={handleInputChange}
                    placeholder="Enter full delivery address"
                    className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 bg-white/80 backdrop-blur-sm"
                  />
                </InputGroup>
                
                <InputGroup icon={Building2} label="Suite / Unit Number">
                  <input
                    type="text"
                    name="suite"
                    value={formData.suite}
                    onChange={handleInputChange}
                    placeholder="Suite, floor, or unit number (optional)"
                    className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 bg-white/80 backdrop-blur-sm"
                  />
                </InputGroup>
              </div>

              {/* Continue Button */}
              <div className="pt-6 border-t border-gray-100">
                <button
                  type="button"
                  onClick={handleFormSubmit}
                  className="w-full bg-gradient-to-r from-blue-600 to-purple-600 text-white py-4 rounded-xl font-semibold text-lg hover:from-blue-700 hover:to-purple-700 focus:ring-4 focus:ring-blue-300 transition-all duration-200 shadow-lg hover:shadow-xl"
                >
                  Continue to Preview
                </button>
              </div>
            </div>
          </div>

          {/* Bottom accent */}
          <div className="h-1 bg-gradient-to-r from-blue-600 to-purple-600"></div>
        </div>
      </div>
    );
  }

  // Preview Step
  return (
    <div className="fixed inset-0 z-50 bg-black/60 backdrop-blur-sm flex justify-center items-center p-4">
      <div className="bg-white rounded-3xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-hidden relative">
        {/* Header */}
        <div className="bg-gradient-to-r from-green-600 to-blue-600 px-8 py-6 relative overflow-hidden">
          <div className="absolute inset-0 bg-white/10 backdrop-blur-sm"></div>
          <div className="relative z-10">
            <button
              onClick={onClose}
              className="absolute top-0 right-0 p-2 text-white/80 hover:text-white hover:bg-white/20 rounded-full transition-all duration-200"
            >
              <X className="w-5 h-5" />
            </button>
            <h2 className="text-3xl font-bold text-white mb-2">Review Your Quote</h2>
            <p className="text-green-100">Please review your information before submitting</p>
          </div>
        </div>

        {/* Preview Content */}
        <div className="px-8 py-6 max-h-[calc(90vh-180px)] overflow-y-auto">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* Customer Information */}
            <div className="space-y-6">
              <div className="bg-gray-50 rounded-2xl p-6">
                <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2">
                  <User className="w-5 h-5 text-blue-600" />
                  Customer Information
                </h3>
                <div className="space-y-1">
                  <PreviewItem label="Full Name" value={formData.fullName} icon={User} />
                  <PreviewItem label="Email" value={formData.email} icon={Mail} />
                  <PreviewItem label="Company" value={formData.companyName} icon={Building2} />
                  <PreviewItem label="Phone" value={formData.phoneNumber} icon={Phone} />
                </div>
              </div>

              <div className="bg-gray-50 rounded-2xl p-6">
                <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2">
                  <Calendar className="w-5 h-5 text-blue-600" />
                  Event Details
                </h3>
                <div className="space-y-1">
                  <PreviewItem label="Event Date" value={formData.eventDate} icon={Calendar} />
                  <PreviewItem label="Event Time" value={formData.eventStartTime} icon={Clock} />
                  <PreviewItem label="Event Type" value={formData.eventType} icon={Settings} />
                  <PreviewItem label="Pickup Date" value={formData.pickupDate} icon={Calendar} />
                  <PreviewItem label="Next Day Pickup" value={formData.nextDayPickup} icon={Package} />
                </div>
              </div>

              <div className="bg-gray-50 rounded-2xl p-6">
                <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2">
                  <MapPin className="w-5 h-5 text-blue-600" />
                  Delivery & Setup
                </h3>
                <div className="space-y-1">
                  <PreviewItem label="Delivery Address" value={formData.deliveryAddress} icon={MapPin} />
                  <PreviewItem label="Suite/Unit" value={formData.suite} icon={Building2} />
                  <PreviewItem label="Building Type" value={formData.buildingType} icon={Building2} />
                  <PreviewItem label="Setup Required" value={formData.needSetup} icon={Settings} />
                </div>
              </div>
            </div>

            {/* Cart Items */}
            <div className="space-y-6">
              <div className="bg-gray-50 rounded-2xl p-6">
                <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2">
                  <ShoppingCart className="w-5 h-5 text-blue-600" />
                  Selected Items ({cartItems?.length || 0})
                </h3>
                
                {cartItems && cartItems.length > 0 ? (
                  <div className="space-y-4">
                    {cartItems.map((item) => (
                      <div key={item.id} className="flex items-center justify-between p-4 bg-white rounded-xl border border-gray-200">
                        <div className="flex-1">
                          <h4 className="font-semibold text-gray-900">{item.name}</h4>
                          <p className="text-sm text-gray-600">Quantity: {item.quantity}</p>
                          <p className="text-sm text-gray-600">Unit Price: {formatCurrency(item.price)}</p>
                        </div>
                        <div className="text-right">
                          <p className="font-bold text-lg text-green-600">
                            {formatCurrency(item.price * item.quantity)}
                          </p>
                        </div>
                      </div>
                    ))}
                    
                    {/* Total */}
                    <div className="mt-6 pt-4 border-t-2 border-gray-200">
                      <div className="flex items-center justify-between">
                        <span className="text-xl font-bold text-gray-900">Total:</span>
                        <span className="text-2xl font-bold text-green-600">
                          {formatCurrency(calculateTotal())}
                        </span>
                      </div>
                    </div>
                  </div>
                ) : (
                  <EmptyCartMessage />
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="px-8 py-6 bg-gray-50 border-t border-gray-200 flex gap-4">
          <button
            onClick={handleBackToForm}
            className="flex-1 flex items-center justify-center gap-2 bg-gray-200 text-gray-700 py-3 rounded-xl font-semibold hover:bg-gray-300 transition-all duration-200"
          >
            <ArrowLeft className="w-5 h-5" />
            Back to Edit
          </button>
          
          <button
            onClick={handleFinalSubmit}
            disabled={submitting || !cartItems || cartItems.length === 0}
            className="flex-1 flex items-center justify-center gap-2 bg-gradient-to-r from-green-600 to-blue-600 text-white py-3 rounded-xl font-semibold hover:from-green-700 hover:to-blue-700 focus:ring-4 focus:ring-green-300 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 shadow-lg hover:shadow-xl"
          >
            {submitting ? (
              <>
                <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                Submitting...
              </>
            ) : (
              <>
                <Check className="w-5 h-5" />
                Confirm & Send Quote
              </>
            )}
          </button>
        </div>
      </div>
    </div>
  );
}








